<!DOCTYPE html>
<html lang="en">
<head>
    <title>THE LOST FILES</title>
    <link rel="stylesheet" href="/fontawesome-free-5.15.4-web/css/all.css">
<!-- Load the custom CSS style file -->
<link rel="stylesheet" type="text/css" href="/style.css">
</head>
<body>
    <main class="main-container">

    <div class="popup-button-container">
                <button class="popup-button">ADD SONG</button>
    </div>
        <div class="overlay"></div>
        <div class="popup">
          <div class="form-style-3">
            <h1 class="add-tracks-title">ADD TRACKS</h1>
            <form id="add_tracks_form" action="/" method="POST" enctype="multipart/form-data">
            <div class="text-input-container">
                <label for="field1"><span>Track Name</span><input type="text" class="input-field" name="nameData" value="" id="track_name"/></label>
            </div>
            <div class="text-input-container">
                <label for="field2"><span>Artist    </span><input type="text" class="input-field" name="artistData" value="" id="artist_name"/></label>
            </div>
          <div class="checkboxes-container">

            <% data.json.forEach(function callback(element, index) { %>
              <label class="container"> <%= element.name %>
                <input type="checkbox" id ="checkbox_item" name="checkbox[]" value="<%=element.name%>" onclick="toggleCheckValue(<%=index%>)">
                <span class="checkmark"></span>
              </label>
              <% }); %>
            
            </div>
                
            <div class="drop-zone">
            <span class="drop-zone__prompt">Drop file here or click to upload</span>
            <input type="file" name="file" id="file" accept=".wav, .mp3" class="drop-zone__input">
          </div>
            <div class="submit-button-container">
                <input class="submit-button" type="submit" value="Submit" name="submit">
            </div>
        </form>
        </div>
        </div>  
        <div class="edit-playlist-button-container">
          <button class="edit-playlist-button" onclick="toggleEditMode()">Edit Playlist OFF</button>

        </div>
        <div class="playlist-list-container">
            <ul class="playlist-list">
                <% data.json.forEach(function callback(element, index) { %>
                    <li class="playlist-list-item<%=index%>" onclick="handleListClick( <%= index %> )"><%= element.name %> </li>
                    <% }); %>
 
                </ul>
        </div>
          <div class="playlist-songs-container">
            <ol class="list" id ="list">
            
                    
                </ol>
          </div>

          <form id="settings_form" action="/settings" method="POST">
            <div class="save-button-container">
              <input class="save-button" type="submit" value="Save" name="Save">
            </div>
          </form>

    </div>


    <div class="player">

        <!--Section for displaying details-->
        <div class="details">
            <div class="now-playing">Playing x of y</div>
            <div class="track-art"></div>
            <div class="track-name">Track Name</div>
            <div class="track-artist">Track Artist</div>
        </div>
    </div>
    <div class="buttons">
        
    </div>

    <!--Seek Slider-->
    <div class="slider_container">
        <div class="current-time">00:00</div>
        <input type="range" min="1" max="100" value="0"
            class="seek_slider" onchange="seekTo()">
        <div class="total-duration">00:00</div>
        <div class="prev-track" onclick="prevTrack()">
          <i class="fa fa-step-backward fa-2x"></i>
      </div>
      <div class="playpause-track" onclick="playpauseTrack()">
          <i class="fa fa-play-circle fa-5x"></i>
      </div>
      <div class="next-track" onclick="nextTrack()">
          <i class="fa fa-step-forward fa-2x"></i>
      </div>
    </div>

    <script type="text/javascript">
        var playlist_songs = [];
        var currentPlaylist = 0;
        var datajson = <%- JSON.stringify(data.json) %>;
        let now_playing = document.querySelector(".now-playing");
        let track_art = document.querySelector(".track-art");
        let track_name = document.querySelector(".track-name");
        let track_artist = document.querySelector(".track-artist");
          
        let playpause_btn = document.querySelector(".playpause-track");
        let next_btn = document.querySelector(".next-track");
        let prev_btn = document.querySelector(".prev-track");
          
        let seek_slider = document.querySelector(".seek_slider");
        let volume_slider = document.querySelector(".volume_slider");
        let curr_time = document.querySelector(".current-time");
        let total_duration = document.querySelector(".total-duration");
        let playlistData = document.querySelector(".list");
        const popup_button = document.querySelector(".popup-button");
        const overlay = document.querySelector(".overlay");
        const popup = document.querySelector(".popup"); 
        const playlist_list = document.querySelector(".playlist-list");
        let list_items = document.querySelectorAll(".playlist-songs-item");
        const list_container = document.querySelector(".playlist-songs-container");
        let edit_playlist_button = document.querySelector(".edit-playlist-button");
        let settings_container = document.querySelector(".playlist-songs-settings-container");
        let settings_list = document.querySelector(".song-settings-list");
        let save_button = document.querySelector(".save-button-container");
        let checkbox_container = document.querySelector("checkboxes-container");
        let settings_form = document.querySelector(".settings_form");
        let add_tracks_form = document.querySelector(".add_tracks_form");
        let track_list = datajson[currentPlaylist].data; 
        let playlistDisplaying = false;
        let scrollAdder = 0;
        var track_index = 0;
        let isPlaying = false;
        let updateTimer;
        var droppedElementId = 0;
        var draggingElementId = 0;
        var dragStartPosition = 0;
        var dragEndPosition = 0;
        var editMode = false;
        stylePlaylist();

        // Create the audio element for the player
        let curr_track = document.createElement('audio');
 
        

        overlay.addEventListener("click", function() {
            overlay.style.display = "none";
            popup.style.display = "none";

        });        


      popup_button.addEventListener("click", function() {
            overlay.style.display = "block";
            popup.style.display = "block";
            attachAddTracksFormListener();
        });
        //Functions

        function loadTrack(track_index) {
            // Clear the previous seek timer
            clearInterval(updateTimer);
            resetValues();
                                                                              //May be able to rework this using playlistdata.id
            //let current_track = track_id_finder(track_index);

            // Load a new track
            curr_track.src = track_list[track_index].path;
            curr_track.load();
            // Update details of the track
            track_art.style.backgroundImage = 
               "url(" + track_list[track_index].image + ")";
            track_name.textContent = track_list[track_index].name;
            track_artist.textContent = track_list[track_index].artist;
            now_playing.textContent = 
               "PLAYING " + (Number(track_list[track_index].index) + 1) + " OF " + track_list.length;
            
            // Set an interval of 1000 milliseconds
            // for updating the seek slider
            updateTimer = setInterval(seekUpdate, 1000);
            
            // Move to the next track if the current finishes playing
            // using the 'ended' event
            curr_track.addEventListener("ended", nextTrack);
            
            // Apply a random background color
            random_bg_color();
        }
            
          function random_bg_color() {
            // Get a random number between 64 to 256
            // (for getting lighter colors)
            let red = Math.floor(Math.random() * 256) + 64;
            let green = Math.floor(Math.random() * 256) + 64;
            let blue = Math.floor(Math.random() * 256) + 64;
            let red2 = Math.floor(Math.random() * 256) + 64;
            let green2 = Math.floor(Math.random() * 256) + 64;
            let blue2 = Math.floor(Math.random() * 256) + 64;

            // Construct a color withe the given values
            let bgColor = "rgb(" + red + ", " + green + ", " + blue + ")";
            let bgColor2 = "rgb(" + red2 + ", " + green2 + ", " + blue2 + ")";

            // Set the background to the new color
            document.body.style.background = "linear-gradient("+bgColor+","+bgColor2+")";
          }
            
          // Function to reset all values to their default
          function resetValues() {
            curr_time.textContent = "00:00";
            total_duration.textContent = "00:00";
            seek_slider.value = 0;
          }
        
          function playpauseTrack() {
            // Switch between playing and pausing
            // depending on the current state
            if (!isPlaying) playTrack();
            else pauseTrack();
          }
            
          function playTrack() {
            // Play the loaded track
            curr_track.play();
            isPlaying = true;
            
            // Replace icon with the pause icon
            playpause_btn.innerHTML = '<i class="fa fa-pause-circle fa-5x"></i>';
          }
            
          function pauseTrack() {
            // Pause the loaded track
            curr_track.pause();
            isPlaying = false;
            
            // Replace icon with the play icon
            playpause_btn.innerHTML = '<i class="fa fa-play-circle fa-5x"></i>';
          }
            
          function nextTrack() {
            // Go back to the first track if the
            // current one is the last in the track list
          
            let track_index_helper = track_list[track_index].index;
            
            if (track_index_helper < track_list.length - 1)
              track_index_helper += 1;
            else track_index_helper = 0;
            
            track_index = track_id_finder(track_index_helper);
        
            // Load and play the new track
            loadTrack(track_index);
            playTrack();
          }
            
          function prevTrack() {
            // Go back to the last track if the
            // current one is the first in the track list                      
           
            let track_index_helper = track_list[track_index].index;

            
            if (track_index_helper > 0)
              track_index_helper -= 1;
            else track_index_helper = track_list.length - 1;
              
            track_index = track_id_finder(track_index_helper);
            // Load and play the new track
            loadTrack(track_index);
            playTrack();
          }
        
          function seekTo() {
            // Calculate the seek position by the
            // percentage of the seek slider 
            // and get the relative duration to the track
            seekto = curr_track.duration * (seek_slider.value / 100);
            
            // Set the current track position to the calculated seek position
            curr_track.currentTime = seekto;
          }
            
          function setVolume() {
            // Set the volume according to the
            // percentage of the volume slider set
            curr_track.volume = volume_slider.value / 100;
          }
            
          function seekUpdate() {
            let seekPosition = 0;
            
            // Check if the current track duration is a legible number
            if (!isNaN(curr_track.duration)) {
              seekPosition = curr_track.currentTime * (100 / curr_track.duration);
              seek_slider.value = seekPosition;
            
              // Calculate the time left and the total duration
              let currentMinutes = Math.floor(curr_track.currentTime / 60);
              let currentSeconds = Math.floor(curr_track.currentTime - currentMinutes * 60);
              let durationMinutes = Math.floor(curr_track.duration / 60);
              let durationSeconds = Math.floor(curr_track.duration - durationMinutes * 60);
            
              // Add a zero to the single digit time values
              if (currentSeconds < 10) { currentSeconds = "0" + currentSeconds; }
              if (durationSeconds < 10) { durationSeconds = "0" + durationSeconds; }
              if (currentMinutes < 10) { currentMinutes = "0" + currentMinutes; }
              if (durationMinutes < 10) { durationMinutes = "0" + durationMinutes; }
            
              // Display the updated duration
              curr_time.textContent = currentMinutes + ":" + currentSeconds;
              total_duration.textContent = durationMinutes + ":" + durationSeconds;
            }
          }

          function handleListClick(index) {
            displaySongs(index);
            changeListTextColor(index);
            currentPlaylist = index;
            playlistDisplaying = true;
            addDrag();
            createSettingsFeilds();
            hideSettings();
          }

          function stylePlaylist() {
            for (i = 0; i < playlist_list.children.length; i++) {
              if (i % 2 == 0) 
                playlist_list.children[i].style.background = "#1e1e1e";
            }
          }

        const initSortableList = (e) => {
          e.preventDefault();
          const draggingItem = document.querySelector(".dragging");
          // Getting all items except currently dragging and making array of them
          let siblings = [...list.querySelectorAll(".playlist-songs-item:not(.dragging)")];

          let nextSibling = siblings.find(sibling => {
          

            //Logic for scrolling
            if ((e.clientY > (list_container.offsetHeight + list_container.offsetTop) * 0.8)) {
              if (list_container.scrollTop < playlistData.clientHeight - list_container.offsetHeight) {
                list_container.scrollTop += 1;
              }

            } 
            if ((e.clientY < (list_container.offsetHeight + list_container.offsetTop) / 2)) {
              if (list_container.scrollTop >= 0) {
              list_container.scrollTop -= .5;
              }

            }

            

            return e.clientY + list_container.scrollTop <= sibling.offsetTop + sibling.offsetHeight;
          });

          // Inserting the dragging item before the found sibling   
            if (nextSibling == undefined) {
              droppedElementId = track_list.length-1;

        
            } else {
              droppedElementId = nextSibling.id;
            }
            draggingElementId = draggingItem.id;

            list.insertBefore(draggingItem, nextSibling);

        }
        //event listeners for playlistdata
        playlistData.addEventListener("drop", (event) => {
          reorderPlaylist(draggingElementId, droppedElementId);
          track_list.forEach( item => {
        });
          recolorPlaylist();
          reloadTrack();
          displaySettings();
        });

      

        

        function reloadTrack() {
          track_art.style.backgroundImage = 
               "url(" + track_list[track_index].image + ")";
            track_name.textContent = track_list[track_index].name;
            track_artist.textContent = track_list[track_index].artist;
            now_playing.textContent = 
               "PLAYING " + (track_list[track_index].index + 1) + " OF " + track_list.length;
        }
        
        function recolorPlaylist() {
          //recolor playlist so it is always alternating
          for(i = 0; i < playlistData.childNodes.length; i++) {
            if (i %2 == 0)
                      playlistData.childNodes[i].style.color = 'white';
            else {
              playlistData.childNodes[i].style.color = '#F072A9';
            }
          }
        }
        

        //updates track_list[i].index to new values after element is dropped
        function reorderPlaylist(draggingElementId, droppedElementId) {
          const now_playing = track_index;
          //track_list[childNodes[i].id].index = i
          let i = 0;
          for (let child = playlistData.firstChild; child != null; child = child.nextSibling) {
            track_list[child.id].index = i;
            i++;
          }
          track_index = now_playing;
        
          
        }


        function addDrag() {
          list_items = document.querySelectorAll(".playlist-songs-item");
          list_items.forEach(item => {
            item.addEventListener("dragstart", () => {
              setTimeout( () => item.classList.add("dragging"), 0);              
            dragStartPosition = item.offsetTop;
            });
            item.addEventListener("dragend", () => {
              item.classList.remove("dragging");
              dragEndPosition = item.offsetTop;
            });
         });
        }

        function changeListTextColor(index) {
          document.querySelector('.playlist-list-item' + currentPlaylist).style.color = '#F072A9';
          const name = '.playlist-list-item' + index;
          document.querySelector(name).style.color = 'white';

        }

        var handleSongClick = function(event) {                     
          track_index = track_list[event.target.id].index;
          //track_index = event.target.id;        
          loadTrack(track_index);
          
        }

        function displaySongs(index) {
            while(playlistData.firstChild) {
              playlistData.removeChild(playlistData.lastChild);
            }

          track_list = datajson[index].data;
          for (i = 0; i < track_list.length; i++) {
            const elem = track_list.find(o => o.index === i);
            var li = document.createElement('li');
            li.className = "playlist-songs-item";
            li.draggable = true;
            li.innerText = elem.name;
            li.id = i;
      
            if (i %2 == 0) {                                                                      
              li.style.color = 'white';
             li.style.background = '#1e1e1e';
              
            }
            playlistData.appendChild(li);
          }
          playlistData.addEventListener('click', handleSongClick, true);
        }

        function track_id_finder(track_index_number) {
          return track_list.find(o => o.index == track_index_number).id;
        }

        function toggleEditMode() {
            editMode = !editMode;
            //addDrag();              //need remove drag and remove onclick
            if (editMode) {
              edit_playlist_button.textContent = "Edit Playlist ON";
              playlistData.addEventListener("dragover", initSortableList);
              playlistData.addEventListener("dragenter", e => e.preventDefault());
              playlistData.removeEventListener('click', handleSongClick, true);
              displaySettings();
            } else {
              edit_playlist_button.textContent = "Edit Playlist OFF";
              playlistData.removeEventListener("dragover", initSortableList);
              playlistData.removeEventListener("dragenter", e => e.preventDefault());
              playlistData.addEventListener('click', handleSongClick, true);
              hideSettings();
            }
        }

        function displaySettings() {          
          for (let i = 0; i < list_items.length; i++) {
          list_items[i].childNodes[1].style.visibility = "visible";
          list_items[i].childNodes[2].style.visibility = "visible";
          list_container.style.left = "77vw";
          list_container.style.width = "21vw";
        }
        save_button.style.visibility = "visible";
          
      }

      function hideSettings() {
        //visibility = "hidden" or display = "none"
        for (let i = 0; i < list_items.length; i++) {
          list_items[i].childNodes[1].style.visibility = "hidden";
          list_items[i].childNodes[2].style.visibility = "hidden";
          list_container.style.left = "88vw";
          list_container.style.width = "10vw";
        }
        save_button.style.visibility = "hidden";
      }

      function createSettingsFeilds() {
        for (let i = 0; i < list_items.length; i++) {
            const inputName = document.createElement('input');
            inputName.type = "text";
            inputName.classList ="textfield";
            inputName.form = settings_form;
            inputName.value = track_list[track_id_finder(playlistData.childNodes[i].id)].ts;
            inputName.style.width = "2vw";
            const input2 = document.createElement('input');
            input2.type = "text";
            input2.form = settings_form;
            input2.classList = "textfield2";
            input2.value = track_list[track_id_finder(playlistData.childNodes[i].id)].te;
            input2.style.width = "2vw";
            list_items[i].appendChild(inputName);
            list_items[i].appendChild(input2);
            list_items[i].style.width = "300px";
       }
      }


      document.querySelectorAll(".drop-zone__input").forEach((inputElement) => {
	const dropZoneElement = inputElement.closest(".drop-zone");

	dropZoneElement.addEventListener("click", (e) => {
		inputElement.click();
	});

	inputElement.addEventListener("change", (e) => {
		if (inputElement.files.length) {
			updateThumbnail(dropZoneElement, inputElement.files[0]);
		}
	});

	dropZoneElement.addEventListener("dragover", (e) => {
		e.preventDefault();
		dropZoneElement.classList.add("drop-zone--over");
	});

	["dragleave", "dragend"].forEach((type) => {
		dropZoneElement.addEventListener(type, (e) => {
			dropZoneElement.classList.remove("drop-zone--over");
		});
	});

	dropZoneElement.addEventListener("drop", (e) => {
		e.preventDefault();

		if (e.dataTransfer.files.length) {
			inputElement.files = e.dataTransfer.files;
			updateThumbnail(dropZoneElement, e.dataTransfer.files[0]);
		}

		dropZoneElement.classList.remove("drop-zone--over");
	});
});

/**
 * Updates the thumbnail on a drop zone element.
 *
 * @param {HTMLElement} dropZoneElement
 * @param {File} file
 */
function updateThumbnail(dropZoneElement, file) {
	let thumbnailElement = dropZoneElement.querySelector(".drop-zone__thumb");

	// First time - remove the prompt
	if (dropZoneElement.querySelector(".drop-zone__prompt")) {
		dropZoneElement.querySelector(".drop-zone__prompt").remove();
	}

	// First time - there is no thumbnail element, so lets create it
	if (!thumbnailElement) {
		thumbnailElement = document.createElement("div");
		thumbnailElement.classList.add("drop-zone__thumb");
		dropZoneElement.appendChild(thumbnailElement);
	}

	thumbnailElement.dataset.label = file.name;

	// Show thumbnail for image files
	if (file.type.startsWith("image/")) {
		const reader = new FileReader();

		reader.readAsDataURL(file);
		reader.onload = () => {
			thumbnailElement.style.backgroundImage = `url('${reader.result}')`;
		};
	} else {
		thumbnailElement.style.backgroundImage = null;
	}
}
  let checkValue = false;
  let checkValueArray = Array.from({ length: playlist_list.children.length }, () => false);
  function toggleCheckValue(index) {
    checkValueArray[index] = !checkValueArray[index];
  }


      


        




          // Load the first track in the tracklist
        loadTrack(track_index);</script>
    </main>
</body>

</html>